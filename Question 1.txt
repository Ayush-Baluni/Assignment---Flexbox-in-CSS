Q. Describe the main differences etween the CSS Flexbox layout model and the CSS Grid layout model. 
   When would you choose to use one over the other?


Ans.

1. CSS Flexbox model:
-> Flexbox is a one-dimensional layout system that operates along a single axis, either row or column. It's ideal for distributing and aligning space within a container 
   and is great for simpler, linear layouts. Flexbox automatically adjusts element sizes based on their content, making it effective for dynamic, content-driven designs 
   and small-scale implementations. It makes our life easier to design and build responsive web pages without having to use tricky hacks and a lot of float and position 
   properties in our CSS code.
    
   When to use CSS Flexbox:
   a. When you have a small design to implement: Flexbox is ideal when you have a small layout design to implement, with a few rows or a few columns
   b. When you need to align elements: Flexbox is perfect for that, the only thing we should do is create a flex container using display: flex and then define the flex-
      direction that we want
   c. When you need a content-first design : Flexbox is the ideal layout system to create web pages if you don’t know exactly how your content is going to look, so if 
      you want everything just to fit in, Flexbox is perfect for that.


2. CSS Grid model:
-> This is a two-dimensional layout system that uses both rows and columns, allowing for precise placement of elements through numerical coordinates. It excels at creating
   complex, organized layouts with features like overlapping elements, spacing between blocks, and asymmetrical designs. It opens a lot of different possibilities to build 
   more complex and organized design systems, without having to fall back to some “hacky ways” that we were using in the past.



   When to use CSS Grid
   a. When you have a complex design to implement. The two-dimensional layout system here is perfect to create a complex design. We can use it in our favor to create more 
      complex and maintainable web pages
   b. When you need to have a gap between block elements. Another thing that’s very helpful in CSS Grid, that we don’t have in Flexbox, is the gap property. 
   c. When you need to overlap elements. Overlapping elements using CSS Grid is very easy, you just need to use the grid-column and grid-row properties and you can have 
      overlapping elements very easily. On the other hand, with Flexbox we still need to use some hacks such as margins, transforms, or absolute positioning
   d. When you need a layout-first design. When you already have your layout design structure, it’s easier to build with CSS Grid, and the two-dimensional layout system 
      helps us a lot when we’re able to use rows and columns together, and position the elements the way we want